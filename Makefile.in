px-objs = pxd.o dev.o iov_iter.o px_version.o kiolib.o pxd_bio_makereq.o pxd_bio_blkmq.o pxd_fastpath.o
obj-m = px.o

### The below CONFIG_PREEMPT_RT/RT_FULL should come from kernel config during build.
### I have hardcoded the env for RT KERNEL and explicitly called out related spin_xx apis.
KBUILD_CPPFLAGS := -D__KERNEL__ -DCONFIG_PREEMPT_RT -DCONFIG_PREEMPT_RT_FULL
KVERSION=$(shell uname -r)

ifndef KERNELPATH
ifeq ($(shell test -d "/usr/src/linux-headers-$(KVERSION)"; echo $$?),0)
     KERNELPATH=/usr/src/linux-headers-$(KVERSION)
else
     KERNELPATH=/usr/src/kernels/$(KVERSION)
endif
endif

# Check for version in KERNELPATH version release file
ifeq ($(shell test -f "$(KERNELPATH)/include/generated/utsrelease.h"; echo $$?),0)
CHK_KVER=$(shell sed -n 's/.* *UTS_RELEASE *"\(.*\)".*/\1/p' $(KERNELPATH)/include/generated/utsrelease.h)
endif

# If no KERNELPATH version found or extract fails use $(KVERSION)
ifeq ($(CHK_KVER),)
CHK_KVER=$(KVERSION)
endif

ifeq ($(shell test -d $(KERNELPATH); echo $$?),1)
$(error Kernel path: $(KERNELPATH)  directory does not exist.)
endif

MINKVER=3.10
BLKMQ_MINKVER=4.18
KERNELVER=$(shell echo $(CHK_KVER) | /bin/sed 's/\([0-9].[0-9]\+\).*/\1/g')

majorfn=$(shell echo "$1" | /bin/sed 's/\(.*\)\.\(.*\)/\1/g')
minorfn=$(shell echo "$1" | /bin/sed 's/\(.*\)\.\(.*\)/\2/g')

verlater=$(shell test "$1" -gt "$2"; echo $$?)
versameorlater=$(shell test "$1" -ge "$2"; echo $$?)
versame=$(shell test "$1" -eq "$2"; echo $$?)

minver_major=$(call majorfn, ${MINKVER})
minver_minor=$(call minorfn, ${MINKVER})

blkmq_major=$(call majorfn, ${BLKMQ_MINKVER})
blkmq_minor=$(call minorfn, ${BLKMQ_MINKVER})

kmajor=$(call majorfn, ${KERNELVER})
kminor=$(call minorfn, ${KERNELVER})

#makereq interface supports fastpath in all version (not recommended)
#PXDEFINES := -D__PXKERNEL__ -D__PXD_BIO_MAKEREQ__
#FPATH_MINKVER=${kmajor}.${kminor}

#blkmq mode has version check for fastpath (default, enabled)
PXDEFINES := -D__PXKERNEL__ -D__PXD_BIO_BLKMQ__
FPATH_MINKVER=4.12

fp_major=$(call majorfn, ${FPATH_MINKVER})
fp_minor=$(call minorfn, ${FPATH_MINKVER})


## min kernel version checks
ifeq ($(call verlater,${minver_major},${kmajor}),0)
$(error Kernel version error: Build kernel version must be >= $(MINKVER).)
else
ifeq ($(call versame,${minver_major},${kmajor}),0)
ifeq ($(call verlater,${minver_minor},${kminor}),0)
$(error Kernel version error: Build kernel version must be >= $(MINKVER).)
endif
endif
endif

## fastpath checks
ifeq ($(call verlater,${kmajor},${fp_major}),0)
PXDEFINES += -D__PX_FASTPATH__
$(info Kernel version ${KERNELVER} supports fastpath.)
else
ifeq ($(call versame,${kmajor},${fp_major}),0)
ifeq ($(call versameorlater,${kminor},${fp_minor}),0)
PXDEFINES += -D__PX_FASTPATH__
$(info Kernel version ${KERNELVER} supports fastpath.)
endif
endif
endif

## blkmq checks
ifeq ($(call verlater,${kmajor},${blkmq_major}),0)
PXDEFINES += -D__PX_BLKMQ__
$(info Kernel version ${KERNELVER} supports blkmq driver model.)
else
ifeq ($(call versame,${kmajor},${blkmq_major}),0)
ifeq ($(call versameorlater,${kminor},${blkmq_minor}),0)
PXDEFINES += -D__PX_BLKMQ__
$(info Kernel version ${KERNELVER} supports blkmq driver model.)
endif
endif
endif

# EL8 Specific kernel checks
ifeq ($(shell echo "$(CHK_KVER)" | grep -Eq '.*\.el8.*\.x86_64'; echo $$?),0)
PXDEFINES += -D__PX_BLKMQ__ -D__EL8__
endif

ifdef KERNELOTHER
KERNELOTHEROPT=O=$(KERNELOTHER)
endif

MAJOR=$(shell echo $(CHK_KVER) | awk -F. '{print $$1}')
MINOR=$(shell echo $(CHK_KVER) | awk -F. '{print $$2}')
PATCH=$(shell echo $(CHK_KVER) | awk -F. '{print $$3}' | awk -F- '{print $$1}')
export REVISION=$(shell echo $(CHK_KVER) | awk -F. '{print $$3}' |  awk -F- '{print $$2}')
export VERSION=$(MAJOR).$(MINOR).$(PATCH)
export KERNELPATH
export OUTPATH
ccflags-y := $(ADDCCFLAGS) -Wframe-larger-than=2048 -Werror -I$(src) $(KBUILD_CPPFLAGS) $(PXDEFINES)

# EL8 Specific kernel checks
ifeq ($(shell echo "$(CHK_KVER)" | grep -Eq '.*\.el8.*\.x86_64'; echo $$?),0)
PXDEFINES += -D__PX_BLKMQ__ -D__EL8__
else
# 5.x kernel checks
ifeq ($(shell test "$(MAJOR)" = "5"; echo $$?),0)
PXDEFINES += -D__PX_BLKMQ__
endif
endif

ifdef FORCE_CONTAINER_CC
FORCE_CC=CC=$(FORCE_CONTAINER_CC)
endif

ccflags-y := $(ADDCCFLAGS) -Wframe-larger-than=2048 -Werror -I$(src) $(KBUILD_CPPFLAGS) $(PXDEFINES)

.PHONY: rpm

all: px_version.c
	make $(FORCE_CC) -C $(KERNELPATH) $(KERNELOTHEROPT) M=$(CURDIR) modules

insert: all
	insmod px.ko $(PXD_NUM_CONTEXT_EXPORTED)

clean:
	make -C $(KERNELPATH) $(KERNELOTHEROPT) M=$(CURDIR) clean

install:
	make V=1 -C $(KERNELPATH) $(KERNELOTHEROPT) M=$(CURDIR) modules_install

test_clean:
	@/bin/rm -f test/pxd_test

pxd_test: pxd_test.cc
	@echo "Building Test ..."
	g++ -I. -std=c++11 test/pxd_test.cc -lgtest -lboost_iostreams -lpthread -o test/pxd_test

rpm:
	@cd rpm && ./buildrpm.sh

docker-build-dev:
	docker build -t portworx/px-fuse:dev -f Dockerfile .

docker-build: docker-build-dev
	docker run --privileged \
	-v /usr/src/:/usr/src  \
	-v $(shell pwd):/home/px-fuse \
	portworx/px-fuse:dev make

px_version.c:
	echo "const char *gitversion = \"$(shell git name-rev --name-only HEAD):$(shell git rev-parse HEAD)\";" > $@

distclean: clean
	@/bin/rm -f  config.* Makefile
	@/bin/rm -f test/pxd_test
